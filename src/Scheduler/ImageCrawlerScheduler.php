<?phpnamespace Nemundo\Webcam\Scheduler;use Nemundo\App\Scheduler\Job\AbstractScheduler;use Nemundo\Core\Debug\Debug;use Nemundo\Core\File\UniqueFilename;use Nemundo\Core\File\File;use Nemundo\Core\Type\DateTime\DateTime;use Nemundo\Core\WebRequest\WebRequest;use Nemundo\Project\Path\TmpPath;use Nemundo\Webcam\Data\Image\Image;use Nemundo\Webcam\Data\Image\ImageCount;use Nemundo\Webcam\Data\Webcam\WebcamReader;class ImageCrawlerScheduler extends AbstractScheduler{    protected function loadScheduler()    {        //$this->active=true;        $this->minute = 2;        $this->consoleScript=true;        $this->scriptName='webcam-crawler';    }    public function run()    {        $webcamReader= new WebcamReader();        //$webcamReader->filter->andEqual($webcamReader->model->imageCrawler,true);        foreach ($webcamReader->getData() as $webcamRow) {            $filename = (new TmpPath())                ->addPath((new UniqueFilename())->getUniqueFilename('jpg'))                ->getFilename();            $download = new WebRequest();            $download->downloadUrl($webcamRow->imageUrl, $filename);            //(new Debug())->write($filename);            $file = new File($filename);            $hash = $file->getHash();  // md5_file($filename);  // $this->getFilename()); $file->getHash();            //(new Debug())->write($hash);            //exit;            $count = new ImageCount();            $count->filter->andEqual($count->model->webcamId, $webcamRow->id);            $count->filter->andEqual($count->model->hash, $hash);            if ($count->getCount() == 0) {                $data = new Image();                $data->webcamId=$webcamRow->id;                $data->image->fromFilename($filename);                $data->dateTime = (new DateTime())->setNow();                $data->hash = $hash;                $data->save();            }            $file->deleteFile();        }    }}